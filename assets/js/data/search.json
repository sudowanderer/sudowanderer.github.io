[ { "title": "Ubuntu 20.04 on Lenovo T14s AMD Gen1", "url": "/posts/ubuntu-20-04-on-lenovo-t14s-amd-gen1/", "categories": "linux", "tags": "ubuntu", "date": "2022-04-10 19:26:00 +0800", "snippet": "Basically, all machine functions working well, including: Intel AX200 wireless card HDMI output with audio DP output on USB-C port (one cable, including power supply, video and audio output) USB hub on USB-C port wake up from sleepAll above functions tested in Ubuntu 20.04.4 LTS with kernel 5.13.0-39-genericmike@ThinkPad-T14s:~$ uname -aLinux ThinkPad-T14s 5.13.0-39-generic #44~20.04.1-Ubuntu SMP Thu Mar 24 16:43:35 UTC 2022 x86_64 x86_64 x86_64 GNU/LinuxRequirementsBootable USB drive download latest image from Ubuntu official website. use Rufus burn ISO to your USB DriveBIOS SettingsBefore migrate from Windows to Ubuntu, you need change some BIOS settings to make Ubuntu behave normally.how to enter BIOS: press enter on the Lenovo screen when booted. press F12 enter the BIOS.Settings: set “OS Optimized Defaults” to “Disabled”. disable secure boot set sleep state to Linux( this fix can not wake up issues) config-&amp;gt;power-&amp;gt;sleep state Installmentboot from USB drive: press enter on the Lenovo screen when booted. press F12 enter the boot source selection screen. chose your USB drivethird-party driver:The opensource third-party driver for AMD Ryzen 7 PRO series chips runs really well on Thinkpad T14s, remember check the box on install wizard.update system:After install, update system to latest.sudo apt update &amp;amp;&amp;amp; sudo apt upgradeOptimizationBelow sections are optional optimizations for Ubuntu. Make your own choice.Tips: If you install Ubuntu with the latest ISO image from Ubuntu official website, you don’t need install the OEM kernel manully. switch to Linux oem kernel.switch to Linux oem kernelAfter you install Ubuntu, default kernel is generic. It may have some annoying problems, like, you can not size brightness with hotkeys, and display colors are not accurate compare to windows. Recommend switch to Linux oem kernel, all above problems will gone.more details about OEM Kernels, see below link:OEM Kerneluse this command to install:sudo apt install linux-oem-20.04bset mouse wheel speedUbuntu default mouse speed is too slow.We need use a config to make it better. install imwheel sudo apt install imwheel create .imwheelrc sudo gedit ~/.imwheelrc content: &quot;.*&quot;None, Up, Button4, 3None, Down, Button5, 3Control_L, Up, Control_L|Button4Control_L, Down, Control_L|Button5Shift_L, Up, Shift_L|Button4Shift_L, Down, Shift_L|Button5 change the number 3 more smaller if you think the speed is too fast. starting onboot use command imwheel -kill to start imwheel. Also, you could use gnome-session-properties set this command as a startup command. Change Ubuntu notification position to right install gnome tweaks and gnome-shell-extensions sudo apt install gnome-tweaks gnome-shell-extensions install Host Connector () sudo apt install chrome-gnome-shell use chrome open https://extensions.gnome.org/, install Notification Banner Position Show the net speed on the status bar make sure you already installed gnome-tweak, gnome-shell-extensions search Net speed Simplified in the extensions store.Software recommendationFor using Ubuntu more conveniently , I recommend some nice software on Ubuntu.OnedriveIf you just migrate from Windows, and still have some important files on onedrive, you should use this opensource onedrive client for Ubuntu(works in terminal).you can use the install script from github, or install from a custom apt repository. add repository and install sudo add-apt-repository ppa:yann1ck/onedrive &amp;amp;&amp;amp; sudo apt install -y onedrive login onedrive sync with specific directory onedrive --synchronize --single-directory [dirName] flameshotBest sceenshot tools on linux.sudo apt install flameshotRemminaBest remote desktop app in Linux, support RDP ,VNC protocals. If you have another windows machine which is often accessed, use this app to access your windows machine on Ubuntu.sudo snap install remmina" }, { "title": "细说Java Validation Api", "url": "/posts/%E7%BB%86%E8%AF%B4Java-Validation-Api/", "categories": "java", "tags": "Java-Validation-Api", "date": "2020-12-06 05:30:57 +0800", "snippet": "概述日常开发中经常需要对接口的入参进行参数校验，使用Java Validation API来进行校验参数，我们只需要在bean的字段上加上所需要的注解即可完成校验。这里Java Validation API指的是规范中的Bean Validation 2.0。该规范中定义了许多约束性注解，如@NotBlank,@Size,@Max,@Email等，以方便对bean的字段进行对应的校验依赖注意，JSR 380只是定义了规范，体现在代码中就是一些注解，其并没有对应的实现。如果不使用Spring等相关框架的话，我们需要选择适合自己的第三方实现。javax.validation maven坐标&amp;lt;!-- https://mvnrepository.com/artifact/javax.validation/validation-api --&amp;gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.validation&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;validation-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.1.Final&amp;lt;/version&amp;gt;&amp;lt;/dependency&amp;gt;这是javax.validation的官方maven坐标。如果我们使用Spring，我们并不需要额外导入上面的依赖，Spring已经内置好了。使用Springboot validation starter在Springboot项目中，使用spring-boot-starter-validation的依赖即可完成依赖的引入。&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;java-validation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;!-- 添加下面这个依赖--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-validation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/project&amp;gt;Spring boot项目直接使用parent标签继承Spring官方的pom，并加上spring-boot-starter-validation依赖即可。Idea中可以按ctrl查看spring-boot-starter-validation的官方pom配置，可发现Spring官方其实使用的是hibernate-validator实现。&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;project xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&amp;gt; &amp;lt;!-- This module was also published with a richer model, Gradle metadata, --&amp;gt; &amp;lt;!-- which should be used instead. Do not delete the following line which --&amp;gt; &amp;lt;!-- is to indicate to Gradle or any Gradle module metadata file consumer --&amp;gt; &amp;lt;!-- that they should prefer consuming it instead. --&amp;gt; &amp;lt;!-- do_not_remove: published-with-gradle-metadata --&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-validation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;name&amp;gt;spring-boot-starter-validation&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Starter for using Java Bean Validation with Hibernate Validator&amp;lt;/description&amp;gt; &amp;lt;url&amp;gt;https://spring.io/projects/spring-boot&amp;lt;/url&amp;gt; &amp;lt;organization&amp;gt; &amp;lt;name&amp;gt;Pivotal Software, Inc.&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://spring.io&amp;lt;/url&amp;gt; &amp;lt;/organization&amp;gt; &amp;lt;licenses&amp;gt; &amp;lt;license&amp;gt; &amp;lt;name&amp;gt;Apache License, Version 2.0&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;https://www.apache.org/licenses/LICENSE-2.0&amp;lt;/url&amp;gt; &amp;lt;/license&amp;gt; &amp;lt;/licenses&amp;gt; &amp;lt;developers&amp;gt; &amp;lt;developer&amp;gt; &amp;lt;name&amp;gt;Pivotal&amp;lt;/name&amp;gt; &amp;lt;email&amp;gt;info@pivotal.io&amp;lt;/email&amp;gt; &amp;lt;organization&amp;gt;Pivotal Software, Inc.&amp;lt;/organization&amp;gt; &amp;lt;organizationUrl&amp;gt;https://www.spring.io&amp;lt;/organizationUrl&amp;gt; &amp;lt;/developer&amp;gt; &amp;lt;/developers&amp;gt; &amp;lt;scm&amp;gt; &amp;lt;connection&amp;gt;scm:git:git://github.com/spring-projects/spring-boot.git&amp;lt;/connection&amp;gt; &amp;lt;developerConnection&amp;gt;scm:git:ssh://git@github.com/spring-projects/spring-boot.git&amp;lt;/developerConnection&amp;gt; &amp;lt;url&amp;gt;https://github.com/spring-projects/spring-boot&amp;lt;/url&amp;gt; &amp;lt;/scm&amp;gt; &amp;lt;issueManagement&amp;gt; &amp;lt;system&amp;gt;GitHub&amp;lt;/system&amp;gt; &amp;lt;url&amp;gt;https://github.com/spring-projects/spring-boot/issues&amp;lt;/url&amp;gt; &amp;lt;/issueManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.3.5.RELEASE&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jakarta.el&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.3&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;!-- hibernate-validator实现--&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate.validator&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-validator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;6.1.6.Final&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;&amp;lt;/project&amp;gt;使用校验注解JSR 380标准定义了许多注解，从字面上就可以推断出意思: @NotNull 校验字段是否不为null @AssertTrue 校验字段值是否为true @Size 校验字段值是否在设置的min和max之间。可以作用于String，Collection，Map，array数组类型。 @Min 校验字段值是否不小于设置的value @Max 校验字段值是否不大于设置的value @Email 校验字段值是否是有效邮箱地址 @NotEmpty 校验字段值不是否不为null或空。可以作用于String，Collection，Map或Array类型。 @NotBlank 只能作用于字符串类型，校验字段是否不为空串。和StringuUtils.isNotBlank类似。 @Positive and @PositiveOrZero 作用于数字。校验字段值是否是整数或0。 @Negative and @NegativeOrZero 作用于数字。校验字段值是否是负数或0。 @Past and @PastOrPresent 校验日期是否已过或包括当前日期。 @Future and @FutureOrPresent 校验日期是否没到或包括当前日期。校验的注解可以作用于集合中的元素:List&amp;lt;@NotBlank String&amp;gt; preferences;这种情况下所有被加进preferences的元素都会进行校验@Past和@Future 可以作用于Java8新增的LocalDate类型private LocalDate dateOfBirth; public Optional&amp;lt;@Past LocalDate&amp;gt; getDateOfBirth() { return Optional.of(dateOfBirth);}这里校验框架会自动拿出Optional里面的值进行校验。一般日常开发中以下两种使用方式会比较频繁 在Controller参数上添加校验注解 在Controller参数的bean类上添加校验注解，比如VO，DTO类编程式校验Springboot环境下直接在方法的参数或bean的字段上添加对应的校验注解即可自动完成校验。下面来介绍一下如何手动进行校验。ValidatorFactory factory = Validation.buildDefaultValidatorFactory();Validator validator = factory.getValidator();使用ValidatorFactory工厂来生产一个Validator。定义beanpublic class User { @Positive @Min(value = 1, message = &quot;年龄不能小于{value}&quot;) private int age; @NotBlank() private String name; @Email(message = &quot;Email ${validatedValue} 不合法&quot;) private String email; // standard setters and getters }创建一个UserUser user = new User();user.setAge(0);user.setName(&quot;&quot;);user.setEmail(&quot;demoemail.com&quot;);message属性占位符在定义message错误消息时，可以使用{注解属性}来获得注解的属性值。通过${validatedValue}来获得被注解字段的值。校验beanSet&amp;lt;ConstraintViolation&amp;lt;User&amp;gt;&amp;gt; validate = validator.validate(user);validate.forEach(userConstraintViolation -&amp;gt; System.out.println(userConstraintViolation.getMessage()));validate方法返回一个set，其中包含了所有的校验错误信息。遍历打印结果：Email demoemail.com 不合法不能为空年龄不能小于1必须是正数自定义校验注解JSR380标准中的注解并不能完全满足自己的需求。可以根据需求写自己的校验注解，并需要实现一个校验器搭配食用。下面以校验ip地址为例介绍。注解定义一个名为IpAddress的注解，代码如下@Target({ElementType.FIELD, ElementType.PARAMETER})@Retention(RetentionPolicy.RUNTIME)@Constraint(validatedBy = IpAddressValidator.class)public @interface IpAddress { String message() default &quot;ip地址无效&quot;; Class&amp;lt;?&amp;gt;[] groups() default {}; Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};}@Constraint需要传入使用的校验器，下文会继续介绍。message()的default值有两种写法 像上面那样写死，缺点是不支持国际化 定义一个key，这样会从properties文件中读取该key的value来替换。比较优雅，支持国际化。下文会详细介绍采用第二种比较优雅，扩展性强。默认的message，在使用该注解时也可以再传入mesage进行覆盖。校验器自定义的校验器实现ConstraintValidator&amp;lt;A extends Annotation, T&amp;gt;接口即可。两个泛型A是自己写的注解名，T是该注解支持的校验字段类型。IpAddressValidator的代码如下：public class IpAddressValidator implements ConstraintValidator&amp;lt;IpAddress, String&amp;gt; { private static final Pattern PATTERN = Pattern.compile(&quot;^(?:[0-9]{1,3}\\\\.){3}[0-9]{1,3}$&quot;); @Override public void initialize(IpAddress constraintAnnotation) { } @Override public boolean isValid(String ip, ConstraintValidatorContext constraintValidatorContext) { return PATTERN.matcher(ip).matches(); }}isValid方法可以定义自己的校验逻辑。这里用正则表达式来校验ip地址的格式。现在在user上添加ip属性，并添加上ipaddress注解 @IpAddress() private String ip;程序运行结果 ip地址无效必须是正数年龄不能小于1不是一个合法的电子邮件地址不能为空message扩展与国际化文件位置message中定义的key，都在ValidationMessages.properties文件中。使用hibernate validator的实现的话，文件位置为D:\\maven\\repository\\org\\hibernate\\validator\\hibernate-validator\\6.1.6.Final\\hibernate-validator-6.1.6.Final.jar!\\org\\hibernate\\validator\\ValidationMessages.properties可以看到，不同语言的文件用下划线和国家isocode区分分别存储扩展message properties文件可以自行编写messages.properties文件来扩展内置的消息。ipaddress.invalid=ip address invalid国际化i18n不同语言的message文件用国家的isocode前面加上下划线来区分。例如messages_zh.properties的内容如下ipaddress.invalid=ip地址无效文件结构如下SpringBoot环境集成properties文件写好了，Springboot环境下需要配置一下方可读取。bean配置public class ValidationConfiguration { @Bean public MessageSource messageSource() { ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource(); messageSource.setBasename(&quot;classpath:messages&quot;); messageSource.setDefaultEncoding(&quot;UTF-8&quot;); return messageSource; } @Bean public LocalValidatorFactoryBean getValidator(MessageSource messageSource) { LocalValidatorFactoryBean bean = new LocalValidatorFactoryBean(); bean.setValidationMessageSource(messageSource); return bean; }}主要配置两个bean，配置mesageSource以可以读取咱们自己的messages.properties文件。配置LocalValidatorFactoryBean以使用咱们自己的messageSource创建容器并获取validator这里为了方便，使用手动创建ApplicationContext的方式来创建Spring容器。 ApplicationContext context = new AnnotationConfigApplicationContext(ValidationConfiguration.class); LocalValidatorFactoryBean bean = context.getAutowireCapableBeanFactory().getBean(LocalValidatorFactoryBean.class); Validator validator = bean.getValidator();接着就可以和之前一样愉快得校验User对象了。Set&amp;lt;ConstraintViolation&amp;lt;User&amp;gt;&amp;gt; validate = validator.validate(user); validate.forEach(userConstraintViolation -&amp;gt; System.out.println(userConstraintViolation.getMessage()));运行代码，可以发现messages_zh.properties文件已被正常读取。 不能为空不是一个合法的电子邮件地址必须是正数年龄不能小于1ip地址无效" }, { "title": "为什么Java在foreach里面remove/add操作List会抛异常", "url": "/posts/%E4%B8%BA%E4%BB%80%E4%B9%88Java%E5%9C%A8foreach%E9%87%8C%E9%9D%A2remove-add%E6%93%8D%E4%BD%9CList%E4%BC%9A%E6%8A%9B%E5%BC%82%E5%B8%B8/", "categories": "java", "tags": "java", "date": "2020-05-21 05:06:52 +0800", "snippet": "背景平常工作大家都只是知道删除List的元素要用迭代器(iterator)，用foreach判断删除的话会抛异常。但是为什么会抛异常呢？ 来，先看看阿里巴巴Java开发手册中是如何写道的：删除”1“不会抛异常，但是”2“却会。很神奇是不是？Exception in thread &quot;main&quot; java.util.ConcurrentModificationException at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901) at java.util.ArrayList$Itr.next(ArrayList.java:851) at exercise.Main.main(Main.java:12)源码分析话不多说，直接上代码。先来看看会走哪些代码。请注意看我加的中文注释。迭代器iterator(ArrayList内部类)private class Itr implements Iterator&amp;lt;E&amp;gt; { int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such // 内部的iterator会自己保存一份List的修改次数expectedModCount int expectedModCount = modCount; public boolean hasNext() { // 每次迭代先走这里这 判断是否有下一个元素 return cursor != size; } @SuppressWarnings(&quot;unchecked&quot;) // 如果hasNext 为true 则进入该方法 public E next() { checkForComodification(); int i = cursor; if (i &amp;gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &amp;gt;= elementData.length) throw new ConcurrentModificationException(); // 游标自增 cursor = i + 1; // 返回元素 （其实就是进入了for循环体，进行咱们的元素值判断) return (E) elementData[lastRet = i]; }其实Java的foreach循环的底层实现就是用的iterator迭代器。ArrayList会使用内部自己的Iterator。先用hasNext()判断是否有下一个元素后，会调用next()来返回下一个元素。checkForComodification()final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException();}其实内部的iterator会自己保存一份List的修改次数expectedModCount。初始的时候是等于modCount的。checkForComodification()逻辑很简单就是判断了下expectedModCount、modCount两个值是否不等。ArrayList方法remove()方法public boolean remove(Object o) { if (o == null) { for (int index = 0; index &amp;lt; size; index++) if (elementData[index] == null) { fastRemove(index); return true; } } else { for (int index = 0; index &amp;lt; size; index++) if (o.equals(elementData[index])) { fastRemove(index); return true; } } return false;}只要传入的参数o不为空，就会走第二个for循环中的fastRemove(）。fastRemove(）/* * Private remove method that skips bounds checking and does not * return the value removed. */private void fastRemove(int index) { modCount++; int numMoved = size - index - 1; if (numMoved &amp;gt; 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); // 注意这里，删除完后List的size就会减1 elementData[--size] = null; // clear to let GC do its work}这里就是实际的删除操作了。这里会把修改计数器自增。并且List的size会减1为什么删除”1“不会抛异常，但是”2“却会？其实很简单。因为判断删除”2”的时候会多走一次循环。因为hasNext()返回了false。下面直接画个表格。 循环次数(循环后) cursor size modCount expectedModCount 0（初始值） 0 2 2(一共两个元素修改次数就是2) 2 1 1 2 2 2 2 2 1(删除后size–) 3（fastRemove中modCount++） 2 第二次循坏后，因为cursor!=size会导致进入第三次循环，进入next()将直接导致modCount!=expectedModCount，最后抛出ConcurrentModificationException。而判断删除“1”的时候不会报错是因为”1”处在第一个元素，进入第一次循环后cursor和size刚好是相等的，不会进入下次循环。表格如下 循环次数(循环后) cursor size modCount expectedModCount 0（初始值） 0 2 2 2 1 1 1 3 2 " }, { "title": "Java8 Stream List转Map Null值报错解决方法", "url": "/posts/Java8-Stream-List%E8%BD%ACMap-Null%E5%80%BC%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/", "categories": "java", "tags": "java8", "date": "2020-02-20 22:12:43 +0800", "snippet": "问题场景user LIst转成id-&amp;gt;email的map，若email存在Null的话，则会报NPE。user定义如下@Setter@Getter@ToStringclass User { private Integer id; private String email;}转换代码如下Map&amp;lt;Integer, String&amp;gt; idMap = users.stream().collect(Collectors.toMap(User::getId, User::getEmail));报错详情Exception in thread &quot;main&quot; java.lang.NullPointerException at java.util.HashMap.merge(HashMap.java:1225) at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320) at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169) at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382) at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) at com.thunisoft.sfxz.les.ztyrygl.dataimport.controller.Controller.main(Controller.java:96)原因查看源码可知，merge方法中如果value是null就会抛NPE，下面展示部分源码@Overridepublic V merge(K key, V value, BiFunction&amp;lt;? super V, ? super V, ? extends V&amp;gt; remappingFunction) { if (value == null) throw new NullPointerException();}解决方案放弃使用Collectors，改用手动传参Map&amp;lt;Integer, String&amp;gt; idMap = users.stream().collect(HashMap::new, (hashMap, user1) -&amp;gt; hashMap.put(user1.getId(), user1.getEmail()), HashMap::putAll);测试一下，现在Map就可以有Null值了。打印map结果如下[User(id=1, email=admin@qq.com), User(id=2, email=null)]后续代码中经常需要list转map的话可以封装一下，方便使用，下面贴上本人的封装方法public static &amp;lt;T, K, U&amp;gt; Map&amp;lt;K, U&amp;gt; collectionToMap(Collection&amp;lt;T&amp;gt; data, Function&amp;lt;? super T, ? extends K&amp;gt; keyMapper,Function&amp;lt;? super T, ? extends U&amp;gt; valueMapper) { return data.stream().collect(HashMap::new, (kuHashMap, t) -&amp;gt; kuHashMap.put(keyMapper.apply(t), valueMapper.apply(t)), HashMap::putAll);}封装后的调用StreamUtils.collectionToMap(users, User::getId, User::getEmail);" } ]
